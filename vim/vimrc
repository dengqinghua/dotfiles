set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/vimshell.vim'
Plugin 'Shougo/vimfiler.vim'

Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/matchit.zip'
Plugin 'vim-scripts/tComment'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/c.vim'

Plugin 'junegunn/vim-easy-align'
Plugin 'majutsushi/tagbar'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'mbbill/undotree'
Plugin 'jiangmiao/auto-pairs'
Plugin 'gregsexton/gitv'
Plugin 'tomasr/molokai'
Plugin 'tpope/vim-ragtag'
Plugin 'mileszs/ack.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'solarnz/thrift.vim'

Plugin 'altercation/vim-colors-solarized'
Plugin 'nightsense/snow'
Plugin 'beigebrucewayne/Turtles'
Plugin 'danilo-augusto/vim-afterglow'
Plugin 'tpope/vim-vividchalk'
Plugin 'myhere/vim-nodejs-complete'
Plugin 'posva/vim-vue'
Plugin 'moll/vim-node'

Plugin 'morhetz/gruvbox'
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'rust-lang/rust.vim'
Plugin 'fatih/vim-go'
" 用于调试go
Plugin 'sebdah/vim-delve'
Plugin 'neomake/neomake'

call vundle#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
filetype plugin indent on
"compiler ruby

set autoindent
set hlsearch
set incsearch
set number
set ruler
set showcmd
set expandtab
set splitright
set diffopt+=vertical
set tabstop=2 shiftwidth=2 softtabstop=2
"set list listchars=tab:»▸,trail:·,nbsp:·
set list listchars=tab:→\ ,trail:·,nbsp:·
"set listchars=tab:..,trail:_,extends:>,precedes:<,nbsp:~
set laststatus=2
set wildmenu
set wildmode=list:longest,list:full
set encoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set termencoding=utf-8
set tags=./tags;$HOME
set nobackup
set noswapfile
set backspace=indent,eol,start

"if exists('+colorcolumn')
"  set colorcolumn=80
"else
"  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
"endif

"autocmd BufNewFile,BufRead *.html.erb set filetype=html.eruby
autocmd BufNewFile,BufRead *.conf set filetype=json

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" basic key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap j gj
nnoremap k gk

nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

runtime! macros/matchit.vim

function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] =~ '\s'
    return "\<Tab>"
  else
    return "\<C-n>"
  endif
endfunction
inoremap <Tab>   <C-r>=InsertTabWrapper()<CR>
inoremap <S-Tab> <C-p>

let mapleader = " "

nnoremap <leader><leader>   <c-^>
nnoremap <silent> <leader>d :noh<CR>
nnoremap <silent> <leader>b :Tagbar<CR>
nnoremap <silent> <leader>c :VimShell<CR>
nnoremap <silent> <leader>u :UndotreeToggle<CR>

function! MyToggleNERDTreeFind()
  if nerdtree#isTreeOpen()
    NERDTreeClose
  else
    NERDTreeFind
  endif
endfunction
noremap <silent> <leader>t :call MyToggleNERDTreeFind()<CR>

function! s:ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>o :ZoomToggle<CR>

vmap <Enter> <Plug>(EasyAlign)
nmap ga      <Plug>(EasyAlign)

"============= neo =============
call neomake#configure#automake('w')

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" )
endfunction
"============= neo =============

"autocmd FileType vue syntax sync fromstart
"autocmd FileType java setlocal omnifunc=javacomplete#Complete
"autocmd FileType java call s:java_settings()

"function! s:java_settings()
"  setlocal tabstop=4 shiftwidth=4 softtabstop=4
"  setlocal list listchars=tab:»▸,trail:·,nbsp:·
"
"call neomake#configure#automake('w')
"" When writing a buffer, and on normal mode changes (after 750ms).
"call neomake#configure#automake('nw', 750)
""   " When reading a buffer (after 1s), and when writing.
"call neomake#configure#automake('rw', 1000)
"endfunction

let g:vimshell_editor_command='/usr/local/bin/vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" unite
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
"nnoremap <C-p>     :<C-u>Unite -start-insert file_rec/async:!<CR>
nnoremap <leader>f :<C-u>Unite -start-insert file_rec/async:!<CR>
nnoremap <leader>s :<C-u>Unite -auto-preview grep:.<CR>
nnoremap <leader>e :<C-u>Unite  buffer bookmark<CR>
"nnoremap <leader>r :<C-u>Unite  file_mru<CR>
nnoremap <leader>y :<C-u>Unite  history/yank<CR>
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  set number
  imap <buffer> <C-j> <Plug>(unite_select_next_line)
  " imap <buffer> <C-k> <Plug>(unite_select_previous_line)
endfunction
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
        \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
        \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_rec_async_command =
        \ 'ag --follow --nocolor --nogroup --hidden -g ""'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" easymotion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase  = 1
map t <Plug>(easymotion-bd-w)
map T <Plug>(easymotion-sn)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('gui_running')
  set guifont=Monaco:h12
  "colorscheme solarized
else
  " highlight SignifySignAdd    cterm=bold ctermbg=NONE ctermfg=119
  " highlight SignifySignDelete cterm=bold ctermbg=NONE ctermfg=167
  " highlight SignifySignChange cterm=bold ctermbg=NONE ctermfg=227
endif
highlight clear SignColumn

colorscheme snow
set background=dark

" tags
"map <Leader>rt :!ctags --extra=+f --exclude=.git --exclude=.js --exclude=.css --exclude=log --exclude=.log -R * `gem environment gemdir`/gems/*<CR><CR>
"
"map <Leader>rt :!ctags -R app/**/*.rb lib/**/*.rb config/**/*.rb `gem environment gemdir`/gems/acti* --exclude=.css --exclude=log --exclude=.log<CR>

map <Leader>rt :!ctags -R app/**/*.rb lib/**/*.rb config/**/*.rb `bundle show --paths` --exclude={.css,.log,.js}<CR><CR>

"map <Leader>rt :!ctags --extra=+f --exclude=.git --exclude=.js --exclude=.css --exclude=log --exclude=.log -R * `gem environment gemdir`/gems/*<CR><CR>

" 窗口切换
noremap <silent> <C-H> <C-W><C-H>
noremap <silent> <C-L> <C-W><C-L>

noremap <silent> H <C-W><C-H>
noremap <silent> L <C-W><C-L>

abbr pry require "pry";binding.pry
abbr edn end
abbrev so source ~/.vimrc<CR>

nnoremap <silent> = <C-I>
nnoremap <silent> - <C-O>

nnoremap <silent> <leader>t :NERDTreeToggle<CR>
nnoremap <silent> <leader>x :NERDTreeFind<CR>

nnoremap <silent> <leader>w :w<CR>
nnoremap <silent> <leader>q :q<CR>

nnoremap <silent> <leader>c <C-W><C-O>

noremap <silent> K k
noremap <silent> U u

nnoremap <silent> <leader>v v$h
nnoremap <silent> <leader>aa :e ~/Documents/records.markdown<CR>
nnoremap <silent> <leader>m :e ~/workspace/guides/source/<CR>

noremap <silent> <leader>df :Gdiff<CR>
noremap <silent> <leader>gb :Gblame<CR>
noremap <silent> <leader>gs :Gstatus<CR>

nnoremap <leader>p a<SPACE><C-R>=strftime("%Y-%m-%d")<CR><Esc>

" ========= Restore cursor to file position in previous editing session =========
set viminfo='10,\"100,:20,%,n~/.viminfo'
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END
" ========= Restore cursor to file position in previous editing session =========
"
set noerrorbells visualbell t_vb=

function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction

" https://stackoverflow.com/questions/17908593/how-to-find-the-unicode-of-the-subscript-alphabet/28373132#28373132
execute "digraphs iS " . 0x2071
execute "digraphs nS " . 0x207f

nnoremap <leader>rs :%s+(images+(https://raw.githubusercontent.com/dengqinghua/roses/master/assets/images+g<CR>
" nnoremap <leader>hh :%! xxd<CR>
" nnoremap <leader>hr :%! xxd -r<CR>

" ========= go =========
" https://michaelthessel.com/go-vim-debugging-with-gdb/
" https://github.com/sebdah/vim-delve
noremap <leader>r :GoRun<CR>
" http://vim.wikia.com/wiki/Get_the_name_of_the_current_file
" 获取当前光标位置的文件位置+行号
noremap <silent> <leader>; <Esc>:let @*=@% . ":" . line(".")<CR>
" 获取当前光标位置的文件位置
noremap <silent> <leader>' <Esc>:let @*=expand('%:p') ":" . line(".")<CR>
noremap <leader>gt i . "github.com/smartystreets/goconvey/convey"<CR>  "testing"<ESC>
noremap ;b :DlvToggleBreakpoint<CR>
noremap ;t :DlvTest<CR>
noremap ;d :DlvDebug<CR>
" ========= go =========
"

" 需要安装 json 这个包
" npm install json
com! FormatJSON %!json
noremap <silent> <leader>fj :FormatJSON<CR>

let g:go_version_warning = 0

abbr cmd ⌘
abbr opt ⌥
abbr ctl ⌃
